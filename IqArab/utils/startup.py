import glob
import os
import sys
import requests
from asyncio.exceptions import CancelledError
from datetime import timedelta
from pathlib import Path
from telethon import Button, functions, types, utils
from IqArab import BOTLOG, BOTLOG_CHATID, PM_LOGGER_GROUP_ID
from ..Config import Config
from ..core.logger import logging
from ..core.session import iqthon
from ..helpers.utils import install_pip
from ..sql_helper.global_collection import del_keyword_collectionlist, get_item_collectionlist
from ..sql_helper.globals import addgvar, delgvar, gvarstatus
from .klanr import load_module
from .tools import create_supergroup
LOGS = logging.getLogger("ุณูุฑุณ ุงูุงูุฑุงุก  \n ")
cmdhr = Config.COMMAND_HAND_LER
async def load_plugins(folder):
    path = f"IqArab/{folder}/*.py"
    files = glob.glob(path)
    files.sort()
    for name in files:
        with open(name) as f:
            path1 = Path(f.name)
            shortname = path1.stem
            try:
                if shortname.replace(".py", "") not in Config.NO_LOAD:
                    flag = True
                    check = 0
                    while flag:
                        try:
                            load_module(shortname.replace(".py", ""),  plugin_path=f"IqArab/{folder}")
                            break
                        except ModuleNotFoundError as e:
                            install_pip(e.name)
                            check += 1
                            if check > 5:
                                break
                else:
                    os.remove(Path(f"IqArab/{folder}/{shortname}.py"))
            except Exception as e:
                os.remove(Path(f"IqArab/{folder}/{shortname}.py"))
                LOGS.info(f"๐ณ ๏ธุบูุฑ ูุงุฏุฑ ุนูู ุงูุชุญููู {shortname} ููุฌุฏ ููุงู ุฎุทุง ุจุณุจุจ : {e}"                )
async def startupmessage():
    try:
        if BOTLOG:
            Config.CATUBLOGO = await iqthon.tgbot.send_file(BOTLOG_CHATID, "https://telegra.ph/file/7fe6990ff2291b21af220.mp4", caption="๐ณ โฆ ุชููู  ุงุนูุงุฏุฉ ุชุดูุบูู\n ุณูุฑุณ ุงูุงูุฑุงุก โ  :  [ 8.2 ] .\n\n๐ณ โฆ ููุญุตูู ุนูู ุงูุงูุฑ ุงูุณูุฑุณ\n ุฃุฑุณูู : (  `.ุงูุงูุฑู`  ) \n\n๐ณ โฆ ูููุนุฑูุฉ ููููุฉ ุชุบูุฑ ุจุนุถ ููุงูุด\n ุงู ุตูุฑ ุงูุณููุฑุณ  ุฃุฑุณูู  :\n (  `.ูุณุงุนุฏู`  )\n\n๐ณ โฆ ุงูููุงุฉ ุงูุฑุณููุฉ ูู ุณูุฑุณ ุงูุงูุฑุงุก : @\n๐ณ โฆ ูุงุฑุงุช ุณูุฑุณ ุชููุซูู  :@T9_10 \n๐ณ โฆ ููุงูุด ุงูุงูุฑุงุก:  @zzzzrq\n ๐ณ โฆุงูุชุญุฏูุซุงุช ูุงูุงุถุงูุงุช :  @C35CS\n",                buttons=[(Button.url("ูุทูุฑ ุชููุซูู ุงูุฑุณูู", "https://t.me/C15CS"),)],            )
    except Exception as e:
        LOGS.error(e)
        return None
async def add_bot_to_logger_group(chat_id):
    bot_details = await iqthon.tgbot.get_me()
    try:
        await iqthon(            functions.messages.AddChatUserRequest(                chat_id=chat_id,                user_id=bot_details.username,                fwd_limit=1000000            )        )
    except BaseException:
        try:
            await iqthon(
                functions.channels.InviteToChannelRequest(                    channel=chat_id,                    users=[bot_details.username]                )            )
        except Exception as e:
            LOGS.error(str(e))
async def setup_bot():
    try:
        await iqthon.connect()
        config = await iqthon(functions.help.GetConfigRequest())
        for option in config.dc_options:
            if option.ip_address == iqthon.session.server_address:
                if iqthon.session.dc_id != option.id:
                    LOGS.warning(                        f"๐ณ ๏ธ ูุนุฑู DC ุซุงุจุช ูู ุงูุฌูุณุฉ ูู {iqthon.session.dc_id}"                        f"๐ณ ๏ธ ูุชุจุน ู {option.id}"                    )
                iqthon.session.set_dc(option.id, option.ip_address, option.port)
                iqthon.session.save()
                break
        bot_details = await iqthon.tgbot.get_me()
        Config.TG_BOT_USERNAME = f"@{bot_details.username}"
        # await iqthon.start(bot_token=Config.TG_BOT_USERNAME)
        iqthon.me = await iqthon.get_me()
        iqthon.uid = iqthon.tgbot.uid = utils.get_peer_id(iqthon.me)
        if Config.OWNER_ID == 0:
            Config.OWNER_ID = utils.get_peer_id(iqthon.me)
    except Exception as e:
        LOGS.error(f"ูู ุจุชุบูุฑ ููุฏ ุชูุฑููุณ - {str(e)}")
        sys.exit()

async def iqchn():
    try:
        os.environ[            "STRING_SESSION"        ] = "**โ :: ุงูุชุจู ุนุฒูุฒู ุงููุณุชุฎุฏู ูุฐุง ุงูููู ููุบู ููููู ุงุฎุชุฑุงู ุญุณุงุจู ูู ูุชู ุชูุตูุจู ูู ุญุณุงุจู ูุง ุชููู.**"
    except Exception as e:
        print(str(e))
    try:

        await iqthon(JoinChannelRequest("@m8m8m"))
    except BaseException:
        pass

async def verifyLoggerGroup():
    flag = False
    if BOTLOG:
        try:
            entity = await iqthon.get_entity(BOTLOG_CHATID)
            if not isinstance(entity, types.User) and not entity.creator:
                if entity.default_banned_rights.send_messages:
                    LOGS.info(                        "๐ณ ๏ธุงููุงุฑ ุงูุฃุฐููุงุช ููููุฏุฉ ูุฅุฑุณุงู ุฑุณุงุฆู ูู PRIVATE_GROUP_BOT_API_ID ุงููุญุฏุฏ."                    )
                if entity.default_banned_rights.invite_users:
                    LOGS.info(                        "๐ณ ๏ธุงููุงุฑ ุงูุฃุฐููุงุช ููููุฏุฉ ูุฅุฑุณุงู ุฑุณุงุฆู ูู PRIVATE_GROUP_BOT_API_ID ุงููุญุฏุฏ."                    )
        except ValueError:
            LOGS.error("๐ณ ๏ธุชูุฃูุฏ ูู ููุงุฑ ุงููุฌูููุนุฉ  PRIVATE_GROUP_BOT_API_ID.")
        except TypeError:
            LOGS.error(                "๐ณ ๏ธูุง ููููู ุงูุนุซูุฑ ุนูู ูุงุฑ ุงููุฌููุนู PRIVATE_GROUP_BOT_API_ID. ุชุฃูุฏ ูู ุตุญุชูุง."            )
        except Exception as e:
            LOGS.error(                "๐ณ ๏ธุญุฏุซ ุงุณุชุซูุงุก ุนูุฏ ูุญุงููุฉ ุงูุชุญูู ูู PRIVATE_GROUP_BOT_API_ID.\n"                + str(e)            )
    else:
        descript = "๐ณ ๏ธ ูุง ุชุญุฐู ูุฐู ุงููุฌููุนุฉ ุฃู ุชุบูุฑ ุฅูู ูุฌููุนุฉ (ุฅุฐุง ููุช ุจุชุบููุฑ ุงููุฌููุนุฉ ุ ูุณูุชู ููุฏ ูู ุดูุฆ .)"
        iqphoto1 = await iqthon.upload_file(file="SQL/extras/iqthon1.jpg")
        _, groupid = await create_supergroup(            "ุชุฎุฒูู ุชููุซูู ุงูุนุฑุจ ุงูุนุงู", iqthon, Config.TG_BOT_USERNAME, descript  ,  iqphoto1 )
        addgvar("PRIVATE_GROUP_BOT_API_ID", groupid)
        print("๐ณ ๏ธ ุชู ุฅูุดุงุก ูุฌููุนุฉ ุงููุณูุงุนุฏุฉ ุจูุฌุงุญ ูุฅุถุงูุชูุง ุฅูู ุงููุชุบูุฑุงุช.")
        flag = True
    if PM_LOGGER_GROUP_ID != -100:
        try:
            entity = await iqthon.get_entity(PM_LOGGER_GROUP_ID)
            if not isinstance(entity, types.User) and not entity.creator:
                if entity.default_banned_rights.send_messages:
                    LOGS.info(                        "๐ณ ๏ธ ุงูุฃุฐููุงุช ููููุฏุฉ ูุฅุฑุณุงู ุฑุณุงุฆู ูู PM_LOGGER_GROUP_ID ุงููุญุฏุฏ."                    )
                if entity.default_banned_rights.invite_users:
                    LOGS.info(                        "๐ณ ๏ธุงูุฃุฐููุงุช ููููุฏุฉ ูููุณุชุฎุฏููู ุงูุฅุถุงูููู ูู PM_LOGGER_GROUP_ID ุงููุญุฏุฏ."                    )
        except ValueError:
            LOGS.error("๐ณ ๏ธ ูุง ูููู ุงูุนุซูุฑ ุนูู ูุงุฑ  PM_LOGGER_GROUP_ID. ุชุฃูุฏ ูู ุตุญุชูุง.")
        except TypeError:
            LOGS.error("๐ณ ๏ธ PM_LOGGER_GROUP_ID ุบูุฑ ูุฏุนูู. ุชุฃูุฏ ูู ุตุญุชูุง.")
        except Exception as e:
            LOGS.error(                "๐ณ ๏ธ ุญุฏุซ ุงุณุชุซูุงุก ุนูุฏ ูุญุงููุฉ ุงูุชุญูู ูู PM_LOGGER_GROUP_ID.\n" + str(e)            )
    else:
        descript = "๐ณ ๏ธ ูุธููู ูุฐุง ุงููุฌููุนุฉ ูุญูุถ ุฑุณุงุฆู ุงูุชู ุชููู ููุฌุฉ ุงููู ุงู ูู ุชุนุฌุจู ูุฐุง ุงููุฌููุนุฉ ูู ุจุญุฐููุง ููุงุฆูุฃ ๐ \n  ุงููุณูุฑุณ : - @C45CS"
        iqphoto2 = await iqthon.upload_file(file="SQL/extras/iqthon2.jpg")
        _, groupid = await create_supergroup(            "ุชุฎุฒูู ุชููุซูู ุงูุนุฑุจ ุงูุฎุงุต", iqthon, Config.TG_BOT_USERNAME, descript    , iqphoto2  )
        addgvar("PM_LOGGER_GROUP_ID", groupid)
        print("๐ณ ๏ธ ุชู ุฅูุดุงุก ูุฌููุนุฉ ุฎุงุตุฉ ูู PRIVATE_GROUP_BOT_API_ID ุจูุฌุงุญ ูุฅุถุงูุชูุง ุฅูู ุงููุชุบูุฑุงุช.")
        flag = True
    if flag:
        executable = sys.executable.replace(" ", "\\ ")
        args = [executable, "-m", "IqArab"]
        os.execle(executable, *args, os.environ)
        sys.exit(0)
